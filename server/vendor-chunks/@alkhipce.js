"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@alkhipce";
exports.ids = ["vendor-chunks/@alkhipce"];
exports.modules = {

/***/ "(ssr)/./node_modules/@alkhipce/editorjs-aitext/dist/aitext.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@alkhipce/editorjs-aitext/dist/aitext.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Un)\n/* harmony export */ });\nvar zt = Object.defineProperty;\nvar Qt = (n, e, t) => e in n ? zt(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;\nvar Be = (n, e, t) => (Qt(n, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nconst D = \"4.17.3\";\nlet dt = !1, J, xt, Pt, qe, Rt, St, At, Et, $t;\nfunction Yt(n, e = { auto: !1 }) {\n  if (dt)\n    throw new Error(`you must \\`import 'openai/shims/${n.kind}'\\` before importing anything else from openai`);\n  if (J)\n    throw new Error(`can't \\`import 'openai/shims/${n.kind}'\\` after \\`import 'openai/shims/${J}'\\``);\n  dt = e.auto, J = n.kind, xt = n.fetch, n.Request, n.Response, n.Headers, Pt = n.FormData, n.Blob, qe = n.File, Rt = n.ReadableStream, St = n.getMultipartRequestOptions, At = n.getDefaultAgent, Et = n.fileFromPath, $t = n.isFsReadStream;\n}\nclass Zt {\n  constructor(e) {\n    this.body = e;\n  }\n  get [Symbol.toStringTag]() {\n    return \"MultipartBody\";\n  }\n}\nfunction en({ manuallyImported: n } = {}) {\n  const e = n ? \"You may need to use polyfills\" : \"Add one of these imports before your first `import â€¦ from 'openai'`:\\n- `import 'openai/shims/node'` (if you're running on Node)\\n- `import 'openai/shims/web'` (otherwise)\\n\";\n  let t, s, r, i;\n  try {\n    t = fetch, s = Request, r = Response, i = Headers;\n  } catch (a) {\n    throw new Error(`this environment is missing the following Web Fetch API type: ${a.message}. ${e}`);\n  }\n  return {\n    kind: \"web\",\n    fetch: t,\n    Request: s,\n    Response: r,\n    Headers: i,\n    FormData: (\n      // @ts-ignore\n      typeof FormData < \"u\" ? FormData : class {\n        // @ts-ignore\n        constructor() {\n          throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${e}`);\n        }\n      }\n    ),\n    Blob: typeof Blob < \"u\" ? Blob : class {\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${e}`);\n      }\n    },\n    File: (\n      // @ts-ignore\n      typeof File < \"u\" ? File : class {\n        // @ts-ignore\n        constructor() {\n          throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${e}`);\n        }\n      }\n    ),\n    ReadableStream: (\n      // @ts-ignore\n      typeof ReadableStream < \"u\" ? ReadableStream : class {\n        // @ts-ignore\n        constructor() {\n          throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${e}`);\n        }\n      }\n    ),\n    getMultipartRequestOptions: async (a, o) => ({\n      ...o,\n      body: new Zt(a)\n    }),\n    getDefaultAgent: (a) => {\n    },\n    fileFromPath: () => {\n      throw new Error(\"The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads\");\n    },\n    isFsReadStream: (a) => !1\n  };\n}\nJ || Yt(en(), { auto: !0 });\nclass m extends Error {\n}\nclass _ extends m {\n  constructor(e, t, s, r) {\n    super(`${_.makeMessage(e, t, s)}`), this.status = e, this.headers = r;\n    const i = t;\n    this.error = i, this.code = i == null ? void 0 : i.code, this.param = i == null ? void 0 : i.param, this.type = i == null ? void 0 : i.type;\n  }\n  static makeMessage(e, t, s) {\n    const r = t != null && t.message ? typeof t.message == \"string\" ? t.message : JSON.stringify(t.message) : t ? JSON.stringify(t) : s;\n    return e && r ? `${e} ${r}` : e ? `${e} status code (no body)` : r || \"(no status code or body)\";\n  }\n  static generate(e, t, s, r) {\n    if (!e)\n      return new Ie({ cause: Xe(t) });\n    const i = t == null ? void 0 : t.error;\n    return e === 400 ? new Tt(e, i, s, r) : e === 401 ? new vt(e, i, s, r) : e === 403 ? new Ft(e, i, s, r) : e === 404 ? new It(e, i, s, r) : e === 409 ? new Mt(e, i, s, r) : e === 422 ? new kt(e, i, s, r) : e === 429 ? new Ot(e, i, s, r) : e >= 500 ? new Lt(e, i, s, r) : new _(e, i, s, r);\n  }\n}\nclass j extends _ {\n  constructor({ message: e } = {}) {\n    super(void 0, void 0, e || \"Request was aborted.\", void 0), this.status = void 0;\n  }\n}\nclass Ie extends _ {\n  constructor({ message: e, cause: t }) {\n    super(void 0, void 0, e || \"Connection error.\", void 0), this.status = void 0, t && (this.cause = t);\n  }\n}\nclass Ze extends Ie {\n  constructor({ message: e } = {}) {\n    super({ message: e ?? \"Request timed out.\" });\n  }\n}\nclass Tt extends _ {\n  constructor() {\n    super(...arguments), this.status = 400;\n  }\n}\nclass vt extends _ {\n  constructor() {\n    super(...arguments), this.status = 401;\n  }\n}\nclass Ft extends _ {\n  constructor() {\n    super(...arguments), this.status = 403;\n  }\n}\nclass It extends _ {\n  constructor() {\n    super(...arguments), this.status = 404;\n  }\n}\nclass Mt extends _ {\n  constructor() {\n    super(...arguments), this.status = 409;\n  }\n}\nclass kt extends _ {\n  constructor() {\n    super(...arguments), this.status = 422;\n  }\n}\nclass Ot extends _ {\n  constructor() {\n    super(...arguments), this.status = 429;\n  }\n}\nclass Lt extends _ {\n}\nclass L {\n  constructor(e, t) {\n    this.iterator = e, this.controller = t;\n  }\n  static fromSSEResponse(e, t) {\n    let s = !1;\n    const r = new tn();\n    async function* i() {\n      if (!e.body)\n        throw t.abort(), new m(\"Attempted to iterate over a response with no body\");\n      const o = new N(), c = ft(e.body);\n      for await (const p of c)\n        for (const f of o.decode(p)) {\n          const w = r.decode(f);\n          w && (yield w);\n        }\n      for (const p of o.flush()) {\n        const f = r.decode(p);\n        f && (yield f);\n      }\n    }\n    async function* a() {\n      if (s)\n        throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n      s = !0;\n      let o = !1;\n      try {\n        for await (const c of i())\n          if (!o) {\n            if (c.data.startsWith(\"[DONE]\")) {\n              o = !0;\n              continue;\n            }\n            if (c.event === null) {\n              let p;\n              try {\n                p = JSON.parse(c.data);\n              } catch (f) {\n                throw console.error(\"Could not parse message into JSON:\", c.data), console.error(\"From chunk:\", c.raw), f;\n              }\n              if (p && p.error)\n                throw new _(void 0, p.error, void 0, void 0);\n              yield p;\n            }\n          }\n        o = !0;\n      } catch (c) {\n        if (c instanceof Error && c.name === \"AbortError\")\n          return;\n        throw c;\n      } finally {\n        o || t.abort();\n      }\n    }\n    return new L(a, t);\n  }\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream(e, t) {\n    let s = !1;\n    async function* r() {\n      const a = new N(), o = ft(e);\n      for await (const c of o)\n        for (const p of a.decode(c))\n          yield p;\n      for (const c of a.flush())\n        yield c;\n    }\n    async function* i() {\n      if (s)\n        throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n      s = !0;\n      let a = !1;\n      try {\n        for await (const o of r())\n          a || o && (yield JSON.parse(o));\n        a = !0;\n      } catch (o) {\n        if (o instanceof Error && o.name === \"AbortError\")\n          return;\n        throw o;\n      } finally {\n        a || t.abort();\n      }\n    }\n    return new L(i, t);\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterator();\n  }\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee() {\n    const e = [], t = [], s = this.iterator(), r = (i) => ({\n      next: () => {\n        if (i.length === 0) {\n          const a = s.next();\n          e.push(a), t.push(a);\n        }\n        return i.shift();\n      }\n    });\n    return [\n      new L(() => r(e), this.controller),\n      new L(() => r(t), this.controller)\n    ];\n  }\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream() {\n    const e = this;\n    let t;\n    const s = new TextEncoder();\n    return new Rt({\n      async start() {\n        t = e[Symbol.asyncIterator]();\n      },\n      async pull(r) {\n        try {\n          const { value: i, done: a } = await t.next();\n          if (a)\n            return r.close();\n          const o = s.encode(JSON.stringify(i) + `\n`);\n          r.enqueue(o);\n        } catch (i) {\n          r.error(i);\n        }\n      },\n      async cancel() {\n        var r;\n        await ((r = t.return) == null ? void 0 : r.call(t));\n      }\n    });\n  }\n}\nclass tn {\n  constructor() {\n    this.event = null, this.data = [], this.chunks = [];\n  }\n  decode(e) {\n    if (e.endsWith(\"\\r\") && (e = e.substring(0, e.length - 1)), !e) {\n      if (!this.event && !this.data.length)\n        return null;\n      const i = {\n        event: this.event,\n        data: this.data.join(`\n`),\n        raw: this.chunks\n      };\n      return this.event = null, this.data = [], this.chunks = [], i;\n    }\n    if (this.chunks.push(e), e.startsWith(\":\"))\n      return null;\n    let [t, s, r] = nn(e, \":\");\n    return r.startsWith(\" \") && (r = r.substring(1)), t === \"event\" ? this.event = r : t === \"data\" && this.data.push(r), null;\n  }\n}\nclass N {\n  constructor() {\n    this.buffer = [], this.trailingCR = !1;\n  }\n  decode(e) {\n    let t = this.decodeText(e);\n    if (this.trailingCR && (t = \"\\r\" + t, this.trailingCR = !1), t.endsWith(\"\\r\") && (this.trailingCR = !0, t = t.slice(0, -1)), !t)\n      return [];\n    const s = N.NEWLINE_CHARS.has(t[t.length - 1] || \"\");\n    let r = t.split(N.NEWLINE_REGEXP);\n    return r.length === 1 && !s ? (this.buffer.push(r[0]), []) : (this.buffer.length > 0 && (r = [this.buffer.join(\"\") + r[0], ...r.slice(1)], this.buffer = []), s || (this.buffer = [r.pop() || \"\"]), r);\n  }\n  decodeText(e) {\n    if (e == null)\n      return \"\";\n    if (typeof e == \"string\")\n      return e;\n    if (typeof Buffer < \"u\") {\n      if (e instanceof Buffer)\n        return e.toString();\n      if (e instanceof Uint8Array)\n        return Buffer.from(e).toString();\n      throw new m(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n    }\n    if (typeof TextDecoder < \"u\") {\n      if (e instanceof Uint8Array || e instanceof ArrayBuffer)\n        return this.textDecoder ?? (this.textDecoder = new TextDecoder(\"utf8\")), this.textDecoder.decode(e);\n      throw new m(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`);\n    }\n    throw new m(\"Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.\");\n  }\n  flush() {\n    if (!this.buffer.length && !this.trailingCR)\n      return [];\n    const e = [this.buffer.join(\"\")];\n    return this.buffer = [], this.trailingCR = !1, e;\n  }\n}\nN.NEWLINE_CHARS = /* @__PURE__ */ new Set([`\n`, \"\\r\", \"\\v\", \"\\f\", \"\u001c\", \"\u001d\", \"\u001e\", \"Â…\", \"\\u2028\", \"\\u2029\"]);\nN.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction nn(n, e) {\n  const t = n.indexOf(e);\n  return t !== -1 ? [n.substring(0, t), e, n.substring(t + e.length)] : [n, \"\", \"\"];\n}\nfunction ft(n) {\n  if (n[Symbol.asyncIterator])\n    return n;\n  const e = n.getReader();\n  return {\n    async next() {\n      try {\n        const t = await e.read();\n        return t != null && t.done && e.releaseLock(), t;\n      } catch (t) {\n        throw e.releaseLock(), t;\n      }\n    },\n    async return() {\n      const t = e.cancel();\n      return e.releaseLock(), await t, { done: !0, value: void 0 };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\nconst Bt = (n) => n != null && typeof n == \"object\" && typeof n.url == \"string\" && typeof n.blob == \"function\", sn = (n) => n != null && typeof n == \"object\" && typeof n.name == \"string\" && typeof n.lastModified == \"number\" && jt(n), jt = (n) => n != null && typeof n == \"object\" && typeof n.size == \"number\" && typeof n.type == \"string\" && typeof n.text == \"function\" && typeof n.slice == \"function\" && typeof n.arrayBuffer == \"function\", rn = (n) => sn(n) || Bt(n) || $t(n);\nasync function Nt(n, e, t = {}) {\n  var r;\n  if (n = await n, Bt(n)) {\n    const i = await n.blob();\n    return e || (e = new URL(n.url).pathname.split(/[\\\\/]/).pop() ?? \"unknown_file\"), new qe([i], e, t);\n  }\n  const s = await an(n);\n  if (e || (e = cn(n) ?? \"unknown_file\"), !t.type) {\n    const i = (r = s[0]) == null ? void 0 : r.type;\n    typeof i == \"string\" && (t = { ...t, type: i });\n  }\n  return new qe(s, e, t);\n}\nasync function an(n) {\n  var t;\n  let e = [];\n  if (typeof n == \"string\" || ArrayBuffer.isView(n) || // includes Uint8Array, Buffer, etc.\n  n instanceof ArrayBuffer)\n    e.push(n);\n  else if (jt(n))\n    e.push(await n.arrayBuffer());\n  else if (ln(n))\n    for await (const s of n)\n      e.push(s);\n  else\n    throw new Error(`Unexpected data type: ${typeof n}; constructor: ${(t = n == null ? void 0 : n.constructor) == null ? void 0 : t.name}; props: ${on(n)}`);\n  return e;\n}\nfunction on(n) {\n  return `[${Object.getOwnPropertyNames(n).map((t) => `\"${t}\"`).join(\", \")}]`;\n}\nfunction cn(n) {\n  var e;\n  return je(n.name) || je(n.filename) || // For fs.ReadStream\n  ((e = je(n.path)) == null ? void 0 : e.split(/[\\\\/]/).pop());\n}\nconst je = (n) => {\n  if (typeof n == \"string\")\n    return n;\n  if (typeof Buffer < \"u\" && n instanceof Buffer)\n    return String(n);\n}, ln = (n) => n != null && typeof n == \"object\" && typeof n[Symbol.asyncIterator] == \"function\", mt = (n) => n && typeof n == \"object\" && n.body && n[Symbol.toStringTag] === \"MultipartBody\", G = async (n) => {\n  const e = await un(n.body);\n  return St(e, n);\n}, un = async (n) => {\n  const e = new Pt();\n  return await Promise.all(Object.entries(n || {}).map(([t, s]) => We(e, t, s))), e;\n}, We = async (n, e, t) => {\n  if (t !== void 0) {\n    if (t == null)\n      throw new TypeError(`Received null for \"${e}\"; to pass null in FormData, you must use the string 'null'`);\n    if (typeof t == \"string\" || typeof t == \"number\" || typeof t == \"boolean\")\n      n.append(e, String(t));\n    else if (rn(t)) {\n      const s = await Nt(t);\n      n.append(e, s);\n    } else if (Array.isArray(t))\n      await Promise.all(t.map((s) => We(n, e + \"[]\", s)));\n    else if (typeof t == \"object\")\n      await Promise.all(Object.entries(t).map(([s, r]) => We(n, `${e}[${s}]`, r)));\n    else\n      throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${t} instead`);\n  }\n};\nvar hn = globalThis && globalThis.__classPrivateFieldSet || function(n, e, t, s, r) {\n  if (s === \"m\")\n    throw new TypeError(\"Private method is not writable\");\n  if (s === \"a\" && !r)\n    throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof e == \"function\" ? n !== e || !r : !e.has(n))\n    throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return s === \"a\" ? r.call(n, t) : r ? r.value = t : e.set(n, t), t;\n}, dn = globalThis && globalThis.__classPrivateFieldGet || function(n, e, t, s) {\n  if (t === \"a\" && !s)\n    throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof e == \"function\" ? n !== e || !s : !e.has(n))\n    throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return t === \"m\" ? s : t === \"a\" ? s.call(n) : s ? s.value : e.get(n);\n}, Z;\nasync function Dt(n) {\n  const { response: e } = n;\n  if (n.options.stream)\n    return K(\"response\", e.status, e.url, e.headers, e.body), L.fromSSEResponse(e, n.controller);\n  if (e.status === 204)\n    return null;\n  if (n.options.__binaryResponse)\n    return e;\n  const t = e.headers.get(\"content-type\");\n  if (t != null && t.includes(\"application/json\")) {\n    const r = await e.json();\n    return K(\"response\", e.status, e.url, e.headers, r), r;\n  }\n  const s = await e.text();\n  return K(\"response\", e.status, e.url, e.headers, s), s;\n}\nclass Me extends Promise {\n  constructor(e, t = Dt) {\n    super((s) => {\n      s(null);\n    }), this.responsePromise = e, this.parseResponse = t;\n  }\n  _thenUnwrap(e) {\n    return new Me(this.responsePromise, async (t) => e(await this.parseResponse(t)));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import â€¦ from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  asResponse() {\n    return this.responsePromise.then((e) => e.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import â€¦ from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  async withResponse() {\n    const [e, t] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data: e, response: t };\n  }\n  parse() {\n    return this.parsedPromise || (this.parsedPromise = this.responsePromise.then(this.parseResponse)), this.parsedPromise;\n  }\n  then(e, t) {\n    return this.parse().then(e, t);\n  }\n  catch(e) {\n    return this.parse().catch(e);\n  }\n  finally(e) {\n    return this.parse().finally(e);\n  }\n}\nclass fn {\n  constructor({\n    baseURL: e,\n    maxRetries: t = 2,\n    timeout: s = 6e5,\n    // 10 minutes\n    httpAgent: r,\n    fetch: i\n  }) {\n    this.baseURL = e, this.maxRetries = Ne(\"maxRetries\", t), this.timeout = Ne(\"timeout\", s), this.httpAgent = r, this.fetch = i ?? xt;\n  }\n  authHeaders(e) {\n    return {};\n  }\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  defaultHeaders(e) {\n    return {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"User-Agent\": this.getUserAgent(),\n      ...bn(),\n      ...this.authHeaders(e)\n    };\n  }\n  /**\n   * Override this to add your own headers validation:\n   */\n  validateHeaders(e, t) {\n  }\n  defaultIdempotencyKey() {\n    return `stainless-node-retry-${Rn()}`;\n  }\n  get(e, t) {\n    return this.methodRequest(\"get\", e, t);\n  }\n  post(e, t) {\n    return this.methodRequest(\"post\", e, t);\n  }\n  patch(e, t) {\n    return this.methodRequest(\"patch\", e, t);\n  }\n  put(e, t) {\n    return this.methodRequest(\"put\", e, t);\n  }\n  delete(e, t) {\n    return this.methodRequest(\"delete\", e, t);\n  }\n  methodRequest(e, t, s) {\n    return this.request(Promise.resolve(s).then((r) => ({ method: e, path: t, ...r })));\n  }\n  getAPIList(e, t, s) {\n    return this.requestAPIList(t, { method: \"get\", path: e, ...s });\n  }\n  calculateContentLength(e) {\n    if (typeof e == \"string\") {\n      if (typeof Buffer < \"u\")\n        return Buffer.byteLength(e, \"utf8\").toString();\n      if (typeof TextEncoder < \"u\")\n        return new TextEncoder().encode(e).length.toString();\n    }\n    return null;\n  }\n  buildRequest(e) {\n    var d;\n    const { method: t, path: s, query: r, headers: i = {} } = e, a = mt(e.body) ? e.body.body : e.body ? JSON.stringify(e.body, null, 2) : null, o = this.calculateContentLength(a), c = this.buildURL(s, r);\n    \"timeout\" in e && Ne(\"timeout\", e.timeout);\n    const p = e.timeout ?? this.timeout, f = e.httpAgent ?? this.httpAgent ?? At(c), w = p + 1e3;\n    typeof ((d = f == null ? void 0 : f.options) == null ? void 0 : d.timeout) == \"number\" && w > (f.options.timeout ?? 0) && (f.options.timeout = w), this.idempotencyHeader && t !== \"get\" && (e.idempotencyKey || (e.idempotencyKey = this.defaultIdempotencyKey()), i[this.idempotencyHeader] = e.idempotencyKey);\n    const u = {\n      ...o && { \"Content-Length\": o },\n      ...this.defaultHeaders(e),\n      ...i\n    };\n    mt(e.body) && J !== \"node\" && delete u[\"Content-Type\"], Object.keys(u).forEach((P) => u[P] === null && delete u[P]);\n    const h = {\n      method: t,\n      ...a && { body: a },\n      headers: u,\n      ...f && { agent: f },\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: e.signal ?? null\n    };\n    return this.validateHeaders(u, i), { req: h, url: c, timeout: p };\n  }\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  async prepareRequest(e, { url: t, options: s }) {\n  }\n  parseHeaders(e) {\n    return e ? Symbol.iterator in e ? Object.fromEntries(Array.from(e).map((t) => [...t])) : { ...e } : {};\n  }\n  makeStatusError(e, t, s, r) {\n    return _.generate(e, t, s, r);\n  }\n  request(e, t = null) {\n    return new Me(this.makeRequest(e, t));\n  }\n  async makeRequest(e, t) {\n    var f, w;\n    const s = await e;\n    t == null && (t = s.maxRetries ?? this.maxRetries);\n    const { req: r, url: i, timeout: a } = this.buildRequest(s);\n    if (await this.prepareRequest(r, { url: i, options: s }), K(\"request\", i, s, r.headers), (f = s.signal) != null && f.aborted)\n      throw new j();\n    const o = new AbortController(), c = await this.fetchWithTimeout(i, r, a, o).catch(Xe);\n    if (c instanceof Error) {\n      if ((w = s.signal) != null && w.aborted)\n        throw new j();\n      if (t)\n        return this.retryRequest(s, t);\n      throw c.name === \"AbortError\" ? new Ze() : new Ie({ cause: c });\n    }\n    const p = pn(c.headers);\n    if (!c.ok) {\n      if (t && this.shouldRetry(c))\n        return this.retryRequest(s, t, p);\n      const u = await c.text().catch((y) => Xe(y).message), h = _n(u), d = h ? void 0 : u;\n      throw K(\"response\", c.status, i, p, d), this.makeStatusError(c.status, h, d, p);\n    }\n    return { response: c, options: s, controller: o };\n  }\n  requestAPIList(e, t) {\n    const s = this.makeRequest(t, null);\n    return new mn(this, s, e);\n  }\n  buildURL(e, t) {\n    const s = xn(e) ? new URL(e) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && e.startsWith(\"/\") ? e.slice(1) : e)), r = this.defaultQuery();\n    return qt(r) || (t = { ...r, ...t }), t && (s.search = this.stringifyQuery(t)), s.toString();\n  }\n  stringifyQuery(e) {\n    return Object.entries(e).filter(([t, s]) => typeof s < \"u\").map(([t, s]) => {\n      if (typeof s == \"string\" || typeof s == \"number\" || typeof s == \"boolean\")\n        return `${encodeURIComponent(t)}=${encodeURIComponent(s)}`;\n      if (s === null)\n        return `${encodeURIComponent(t)}=`;\n      throw new m(`Cannot stringify type ${typeof s}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n    }).join(\"&\");\n  }\n  async fetchWithTimeout(e, t, s, r) {\n    const { signal: i, ...a } = t || {};\n    i && i.addEventListener(\"abort\", () => r.abort());\n    const o = setTimeout(() => r.abort(), s);\n    return this.getRequestClient().fetch.call(void 0, e, { signal: r.signal, ...a }).finally(() => {\n      clearTimeout(o);\n    });\n  }\n  getRequestClient() {\n    return { fetch: this.fetch };\n  }\n  shouldRetry(e) {\n    const t = e.headers.get(\"x-should-retry\");\n    return t === \"true\" ? !0 : t === \"false\" ? !1 : e.status === 408 || e.status === 409 || e.status === 429 || e.status >= 500;\n  }\n  async retryRequest(e, t, s) {\n    let r;\n    const i = s == null ? void 0 : s[\"retry-after\"];\n    if (i) {\n      const a = parseInt(i);\n      Number.isNaN(a) ? r = Date.parse(i) - Date.now() : r = a * 1e3;\n    }\n    if (!r || !Number.isInteger(r) || r <= 0 || r > 60 * 1e3) {\n      const a = e.maxRetries ?? this.maxRetries;\n      r = this.calculateDefaultRetryTimeoutMillis(t, a);\n    }\n    return await Ht(r), this.makeRequest(e, t - 1);\n  }\n  calculateDefaultRetryTimeoutMillis(e, t) {\n    const i = t - e, a = Math.min(0.5 * Math.pow(2, i), 8), o = 1 - Math.random() * 0.25;\n    return a * o * 1e3;\n  }\n  getUserAgent() {\n    return `${this.constructor.name}/JS ${D}`;\n  }\n}\nclass Ut {\n  constructor(e, t, s, r) {\n    Z.set(this, void 0), hn(this, Z, e, \"f\"), this.options = r, this.response = t, this.body = s;\n  }\n  hasNextPage() {\n    return this.getPaginatedItems().length ? this.nextPageInfo() != null : !1;\n  }\n  async getNextPage() {\n    const e = this.nextPageInfo();\n    if (!e)\n      throw new m(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n    const t = { ...this.options };\n    if (\"params\" in e)\n      t.query = { ...t.query, ...e.params };\n    else if (\"url\" in e) {\n      const s = [...Object.entries(t.query || {}), ...e.url.searchParams.entries()];\n      for (const [r, i] of s)\n        e.url.searchParams.set(r, i);\n      t.query = void 0, t.path = e.url.toString();\n    }\n    return await dn(this, Z, \"f\").requestAPIList(this.constructor, t);\n  }\n  async *iterPages() {\n    let e = this;\n    for (yield e; e.hasNextPage(); )\n      e = await e.getNextPage(), yield e;\n  }\n  async *[(Z = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {\n    for await (const e of this.iterPages())\n      for (const t of e.getPaginatedItems())\n        yield t;\n  }\n}\nclass mn extends Me {\n  constructor(e, t, s) {\n    super(t, async (r) => new s(e, r.response, await Dt(r), r.options));\n  }\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const e = await this;\n    for await (const t of e)\n      yield t;\n  }\n}\nconst pn = (n) => new Proxy(Object.fromEntries(\n  // @ts-ignore\n  n.entries()\n), {\n  get(e, t) {\n    const s = t.toString();\n    return e[s.toLowerCase()] || e[s];\n  }\n}), gn = {\n  method: !0,\n  path: !0,\n  query: !0,\n  body: !0,\n  headers: !0,\n  maxRetries: !0,\n  stream: !0,\n  timeout: !0,\n  httpAgent: !0,\n  signal: !0,\n  idempotencyKey: !0,\n  __binaryResponse: !0\n}, I = (n) => typeof n == \"object\" && n !== null && !qt(n) && Object.keys(n).every((e) => Pn(gn, e)), wn = () => {\n  if (typeof Deno < \"u\" && Deno.build != null)\n    return {\n      \"X-Stainless-Lang\": \"js\",\n      \"X-Stainless-Package-Version\": D,\n      \"X-Stainless-OS\": gt(Deno.build.os),\n      \"X-Stainless-Arch\": pt(Deno.build.arch),\n      \"X-Stainless-Runtime\": \"deno\",\n      \"X-Stainless-Runtime-Version\": Deno.version\n    };\n  if (typeof EdgeRuntime < \"u\")\n    return {\n      \"X-Stainless-Lang\": \"js\",\n      \"X-Stainless-Package-Version\": D,\n      \"X-Stainless-OS\": \"Unknown\",\n      \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n      \"X-Stainless-Runtime\": \"edge\",\n      \"X-Stainless-Runtime-Version\": process.version\n    };\n  if (Object.prototype.toString.call(typeof process < \"u\" ? process : 0) === \"[object process]\")\n    return {\n      \"X-Stainless-Lang\": \"js\",\n      \"X-Stainless-Package-Version\": D,\n      \"X-Stainless-OS\": gt(process.platform),\n      \"X-Stainless-Arch\": pt(process.arch),\n      \"X-Stainless-Runtime\": \"node\",\n      \"X-Stainless-Runtime-Version\": process.version\n    };\n  const n = yn();\n  return n ? {\n    \"X-Stainless-Lang\": \"js\",\n    \"X-Stainless-Package-Version\": D,\n    \"X-Stainless-OS\": \"Unknown\",\n    \"X-Stainless-Arch\": \"unknown\",\n    \"X-Stainless-Runtime\": `browser:${n.browser}`,\n    \"X-Stainless-Runtime-Version\": n.version\n  } : {\n    \"X-Stainless-Lang\": \"js\",\n    \"X-Stainless-Package-Version\": D,\n    \"X-Stainless-OS\": \"Unknown\",\n    \"X-Stainless-Arch\": \"unknown\",\n    \"X-Stainless-Runtime\": \"unknown\",\n    \"X-Stainless-Runtime-Version\": \"unknown\"\n  };\n};\nfunction yn() {\n  if (typeof navigator > \"u\" || !navigator)\n    return null;\n  const n = [\n    { key: \"edge\", pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: \"ie\", pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: \"ie\", pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: \"chrome\", pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: \"firefox\", pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: \"safari\", pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ }\n  ];\n  for (const { key: e, pattern: t } of n) {\n    const s = t.exec(navigator.userAgent);\n    if (s) {\n      const r = s[1] || 0, i = s[2] || 0, a = s[3] || 0;\n      return { browser: e, version: `${r}.${i}.${a}` };\n    }\n  }\n  return null;\n}\nconst pt = (n) => n === \"x32\" ? \"x32\" : n === \"x86_64\" || n === \"x64\" ? \"x64\" : n === \"arm\" ? \"arm\" : n === \"aarch64\" || n === \"arm64\" ? \"arm64\" : n ? `other:${n}` : \"unknown\", gt = (n) => (n = n.toLowerCase(), n.includes(\"ios\") ? \"iOS\" : n === \"android\" ? \"Android\" : n === \"darwin\" ? \"MacOS\" : n === \"win32\" ? \"Windows\" : n === \"freebsd\" ? \"FreeBSD\" : n === \"openbsd\" ? \"OpenBSD\" : n === \"linux\" ? \"Linux\" : n ? `Other:${n}` : \"Unknown\");\nlet wt;\nconst bn = () => wt ?? (wt = wn()), _n = (n) => {\n  try {\n    return JSON.parse(n);\n  } catch {\n    return;\n  }\n}, Cn = new RegExp(\"^(?:[a-z]+:)?//\", \"i\"), xn = (n) => Cn.test(n), Ht = (n) => new Promise((e) => setTimeout(e, n)), Ne = (n, e) => {\n  if (typeof e != \"number\" || !Number.isInteger(e))\n    throw new m(`${n} must be an integer`);\n  if (e < 0)\n    throw new m(`${n} must be a positive integer`);\n  return e;\n}, Xe = (n) => n instanceof Error ? n : new Error(n), yt = (n) => {\n  var e, t, s;\n  if (typeof process < \"u\")\n    return ((e = process.env) == null ? void 0 : e[n]) ?? void 0;\n  if (typeof Deno < \"u\")\n    return (s = (t = Deno.env) == null ? void 0 : t.get) == null ? void 0 : s.call(t, n);\n};\nfunction qt(n) {\n  if (!n)\n    return !0;\n  for (const e in n)\n    return !1;\n  return !0;\n}\nfunction Pn(n, e) {\n  return Object.prototype.hasOwnProperty.call(n, e);\n}\nfunction K(n, ...e) {\n  typeof process < \"u\" && process.env.DEBUG === \"true\" && console.log(`OpenAI:DEBUG:${n}`, ...e);\n}\nconst Rn = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (n) => {\n  const e = Math.random() * 16 | 0;\n  return (n === \"x\" ? e : e & 3 | 8).toString(16);\n}), Sn = () => (\n  // @ts-ignore\n  typeof window < \"u\" && // @ts-ignore\n  typeof window.document < \"u\" && // @ts-ignore\n  typeof navigator < \"u\"\n);\nclass ke extends Ut {\n  constructor(e, t, s, r) {\n    super(e, t, s, r), this.data = s.data, this.object = s.object;\n  }\n  getPaginatedItems() {\n    return this.data;\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams() {\n    return null;\n  }\n  nextPageInfo() {\n    return null;\n  }\n}\nclass k extends Ut {\n  constructor(e, t, s, r) {\n    super(e, t, s, r), this.data = s.data;\n  }\n  getPaginatedItems() {\n    return this.data;\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams() {\n    const e = this.nextPageInfo();\n    if (!e)\n      return null;\n    if (\"params\" in e)\n      return e.params;\n    const t = Object.fromEntries(e.url.searchParams);\n    return Object.keys(t).length ? t : null;\n  }\n  nextPageInfo() {\n    var t, s;\n    if (!((t = this.data) != null && t.length))\n      return null;\n    const e = (s = this.data[this.data.length - 1]) == null ? void 0 : s.id;\n    return e ? { params: { after: e } } : null;\n  }\n}\nclass g {\n  constructor(e) {\n    this.client = e, this.get = e.get.bind(e), this.post = e.post.bind(e), this.patch = e.patch.bind(e), this.put = e.put.bind(e), this.delete = e.delete.bind(e), this.getAPIList = e.getAPIList.bind(e);\n  }\n}\nlet oe = class extends g {\n  create(e, t) {\n    return this.post(\"/chat/completions\", { body: e, ...t, stream: e.stream ?? !1 });\n  }\n};\noe || (oe = {});\nlet ce = class extends g {\n  constructor() {\n    super(...arguments), this.completions = new oe(this.client);\n  }\n};\n(function(n) {\n  n.Completions = oe;\n})(ce || (ce = {}));\nclass le extends g {\n  /**\n   * Generates audio from the input text.\n   */\n  create(e, t) {\n    return this.post(\"/audio/speech\", { body: e, ...t, __binaryResponse: !0 });\n  }\n}\nle || (le = {});\nclass ue extends g {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(e, t) {\n    return this.post(\"/audio/transcriptions\", G({ body: e, ...t }));\n  }\n}\nue || (ue = {});\nclass he extends g {\n  /**\n   * Translates audio into English.\n   */\n  create(e, t) {\n    return this.post(\"/audio/translations\", G({ body: e, ...t }));\n  }\n}\nhe || (he = {});\nclass de extends g {\n  constructor() {\n    super(...arguments), this.transcriptions = new ue(this.client), this.translations = new he(this.client), this.speech = new le(this.client);\n  }\n}\n(function(n) {\n  n.Transcriptions = ue, n.Translations = he, n.Speech = le;\n})(de || (de = {}));\nlet fe = class extends g {\n  /**\n   * Create an assistant file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to an\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants).\n   */\n  create(e, t, s) {\n    return this.post(`/assistants/${e}/files`, {\n      body: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Retrieves an AssistantFile.\n   */\n  retrieve(e, t, s) {\n    return this.get(`/assistants/${e}/files/${t}`, {\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  list(e, t = {}, s) {\n    return I(t) ? this.list(e, {}, t) : this.getAPIList(`/assistants/${e}/files`, et, {\n      query: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Delete an assistant file.\n   */\n  del(e, t, s) {\n    return this.delete(`/assistants/${e}/files/${t}`, {\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n};\nclass et extends k {\n}\n(function(n) {\n  n.AssistantFilesPage = et;\n})(fe || (fe = {}));\nclass me extends g {\n  constructor() {\n    super(...arguments), this.files = new fe(this.client);\n  }\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(e, t) {\n    return this.post(\"/assistants\", {\n      body: e,\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(e, t) {\n    return this.get(`/assistants/${e}`, {\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Modifies an assistant.\n   */\n  update(e, t, s) {\n    return this.post(`/assistants/${e}`, {\n      body: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  list(e = {}, t) {\n    return I(e) ? this.list({}, e) : this.getAPIList(\"/assistants\", tt, {\n      query: e,\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Delete an assistant.\n   */\n  del(e, t) {\n    return this.delete(`/assistants/${e}`, {\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n}\nclass tt extends k {\n}\n(function(n) {\n  n.AssistantsPage = tt, n.Files = fe, n.AssistantFilesPage = et;\n})(me || (me = {}));\nfunction bt(n) {\n  return typeof n.parse == \"function\";\n}\nconst z = (n) => (n == null ? void 0 : n.role) === \"assistant\", Wt = (n) => (n == null ? void 0 : n.role) === \"function\", An = (n) => (n == null ? void 0 : n.role) === \"tool\";\nvar E = globalThis && globalThis.__classPrivateFieldSet || function(n, e, t, s, r) {\n  if (s === \"m\")\n    throw new TypeError(\"Private method is not writable\");\n  if (s === \"a\" && !r)\n    throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof e == \"function\" ? n !== e || !r : !e.has(n))\n    throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return s === \"a\" ? r.call(n, t) : r ? r.value = t : e.set(n, t), t;\n}, l = globalThis && globalThis.__classPrivateFieldGet || function(n, e, t, s) {\n  if (t === \"a\" && !s)\n    throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof e == \"function\" ? n !== e || !s : !e.has(n))\n    throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return t === \"m\" ? s : t === \"a\" ? s.call(n) : s ? s.value : e.get(n);\n}, x, ne, se, q, W, re, X, M, V, ie, ae, U, Ve, Je, Ke, Ge, ze, Qe, Xt, Ye;\nconst _t = 10;\nclass Vt {\n  constructor() {\n    x.add(this), this.controller = new AbortController(), ne.set(this, void 0), se.set(this, () => {\n    }), q.set(this, () => {\n    }), W.set(this, void 0), re.set(this, () => {\n    }), X.set(this, () => {\n    }), M.set(this, {}), this._chatCompletions = [], this.messages = [], V.set(this, !1), ie.set(this, !1), ae.set(this, !1), U.set(this, !1), Qe.set(this, (e) => {\n      if (E(this, ie, !0, \"f\"), e instanceof Error && e.name === \"AbortError\" && (e = new j()), e instanceof j)\n        return E(this, ae, !0, \"f\"), this._emit(\"abort\", e);\n      if (e instanceof m)\n        return this._emit(\"error\", e);\n      if (e instanceof Error) {\n        const t = new m(e.message);\n        return t.cause = e, this._emit(\"error\", t);\n      }\n      return this._emit(\"error\", new m(String(e)));\n    }), E(this, ne, new Promise((e, t) => {\n      E(this, se, e, \"f\"), E(this, q, t, \"f\");\n    }), \"f\"), E(this, W, new Promise((e, t) => {\n      E(this, re, e, \"f\"), E(this, X, t, \"f\");\n    }), \"f\"), l(this, ne, \"f\").catch(() => {\n    }), l(this, W, \"f\").catch(() => {\n    });\n  }\n  _run(e) {\n    setTimeout(() => {\n      e().then(() => {\n        this._emitFinal(), this._emit(\"end\");\n      }, l(this, Qe, \"f\"));\n    }, 0);\n  }\n  _addChatCompletion(e) {\n    var s;\n    this._chatCompletions.push(e), this._emit(\"chatCompletion\", e);\n    const t = (s = e.choices[0]) == null ? void 0 : s.message;\n    return t && this._addMessage(t), e;\n  }\n  _addMessage(e, t = !0) {\n    if (this.messages.push(e), t) {\n      if (this._emit(\"message\", e), (Wt(e) || An(e)) && e.content)\n        this._emit(\"functionCallResult\", e.content);\n      else if (z(e) && e.function_call)\n        this._emit(\"functionCall\", e.function_call);\n      else if (z(e) && e.tool_calls)\n        for (const s of e.tool_calls)\n          s.type === \"function\" && this._emit(\"functionCall\", s.function);\n    }\n  }\n  _connected() {\n    this.ended || (l(this, se, \"f\").call(this), this._emit(\"connect\"));\n  }\n  get ended() {\n    return l(this, V, \"f\");\n  }\n  get errored() {\n    return l(this, ie, \"f\");\n  }\n  get aborted() {\n    return l(this, ae, \"f\");\n  }\n  abort() {\n    this.controller.abort();\n  }\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on(e, t) {\n    return (l(this, M, \"f\")[e] || (l(this, M, \"f\")[e] = [])).push({ listener: t }), this;\n  }\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off(e, t) {\n    const s = l(this, M, \"f\")[e];\n    if (!s)\n      return this;\n    const r = s.findIndex((i) => i.listener === t);\n    return r >= 0 && s.splice(r, 1), this;\n  }\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once(e, t) {\n    return (l(this, M, \"f\")[e] || (l(this, M, \"f\")[e] = [])).push({ listener: t, once: !0 }), this;\n  }\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted(e) {\n    return new Promise((t, s) => {\n      E(this, U, !0, \"f\"), e !== \"error\" && this.once(\"error\", s), this.once(e, t);\n    });\n  }\n  async done() {\n    E(this, U, !0, \"f\"), await l(this, W, \"f\");\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion() {\n    await this.done();\n    const e = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!e)\n      throw new m(\"stream ended without producing a ChatCompletion\");\n    return e;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent() {\n    return await this.done(), l(this, x, \"m\", Ve).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage() {\n    return await this.done(), l(this, x, \"m\", Je).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall() {\n    return await this.done(), l(this, x, \"m\", Ke).call(this);\n  }\n  async finalFunctionCallResult() {\n    return await this.done(), l(this, x, \"m\", Ge).call(this);\n  }\n  async totalUsage() {\n    return await this.done(), l(this, x, \"m\", ze).call(this);\n  }\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n  _emit(e, ...t) {\n    if (l(this, V, \"f\"))\n      return;\n    e === \"end\" && (E(this, V, !0, \"f\"), l(this, re, \"f\").call(this));\n    const s = l(this, M, \"f\")[e];\n    if (s && (l(this, M, \"f\")[e] = s.filter((r) => !r.once), s.forEach(({ listener: r }) => r(...t))), e === \"abort\") {\n      const r = t[0];\n      !l(this, U, \"f\") && !(s != null && s.length) && Promise.reject(r), l(this, q, \"f\").call(this, r), l(this, X, \"f\").call(this, r), this._emit(\"end\");\n      return;\n    }\n    if (e === \"error\") {\n      const r = t[0];\n      !l(this, U, \"f\") && !(s != null && s.length) && Promise.reject(r), l(this, q, \"f\").call(this, r), l(this, X, \"f\").call(this, r), this._emit(\"end\");\n    }\n  }\n  _emitFinal() {\n    const e = this._chatCompletions[this._chatCompletions.length - 1];\n    e && this._emit(\"finalChatCompletion\", e);\n    const t = this.messages[this.messages.length - 1];\n    t && this._emit(\"finalMessage\", t);\n    const s = l(this, x, \"m\", Ve).call(this);\n    s && this._emit(\"finalContent\", s);\n    const r = l(this, x, \"m\", Ke).call(this);\n    r && this._emit(\"finalFunctionCall\", r);\n    const i = l(this, x, \"m\", Ge).call(this);\n    i != null && this._emit(\"finalFunctionCallResult\", i), this._chatCompletions.some((a) => a.usage) && this._emit(\"totalUsage\", l(this, x, \"m\", ze).call(this));\n  }\n  async _createChatCompletion(e, t, s) {\n    const r = s == null ? void 0 : s.signal;\n    r && (r.aborted && this.controller.abort(), r.addEventListener(\"abort\", () => this.controller.abort())), l(this, x, \"m\", Xt).call(this, t);\n    const i = await e.create({ ...t, stream: !1 }, { ...s, signal: this.controller.signal });\n    return this._connected(), this._addChatCompletion(i);\n  }\n  async _runChatCompletion(e, t, s) {\n    for (const r of t.messages)\n      this._addMessage(r, !1);\n    return await this._createChatCompletion(e, t, s);\n  }\n  async _runFunctions(e, t, s) {\n    var u;\n    const r = \"function\", { function_call: i = \"auto\", stream: a, ...o } = t, c = typeof i != \"string\" && (i == null ? void 0 : i.name), { maxChatCompletions: p = _t } = s || {}, f = {};\n    for (const h of t.functions)\n      f[h.name || h.function.name] = h;\n    const w = t.functions.map((h) => ({\n      name: h.name || h.function.name,\n      parameters: h.parameters,\n      description: h.description\n    }));\n    for (const h of t.messages)\n      this._addMessage(h, !1);\n    for (let h = 0; h < p; ++h) {\n      const P = (u = (await this._createChatCompletion(e, {\n        ...o,\n        function_call: i,\n        functions: w,\n        messages: [...this.messages]\n      }, s)).choices[0]) == null ? void 0 : u.message;\n      if (!P)\n        throw new m(\"missing message in ChatCompletion response\");\n      if (!P.function_call)\n        return;\n      const { name: y, arguments: A } = P.function_call, C = f[y];\n      if (C) {\n        if (c && c !== y) {\n          const v = `Invalid function_call: ${JSON.stringify(y)}. ${JSON.stringify(c)} requested. Please try again`;\n          this._addMessage({ role: r, name: y, content: v });\n          continue;\n        }\n      } else {\n        const v = `Invalid function_call: ${JSON.stringify(y)}. Available options are: ${w.map((Oe) => JSON.stringify(Oe.name)).join(\", \")}. Please try again`;\n        this._addMessage({ role: r, name: y, content: v });\n        continue;\n      }\n      let T;\n      try {\n        T = bt(C) ? await C.parse(A) : A;\n      } catch (v) {\n        this._addMessage({\n          role: r,\n          name: y,\n          content: v instanceof Error ? v.message : String(v)\n        });\n        continue;\n      }\n      const R = await C.function(T, this), S = l(this, x, \"m\", Ye).call(this, R);\n      if (this._addMessage({ role: r, name: y, content: S }), c)\n        return;\n    }\n  }\n  async _runTools(e, t, s) {\n    var u, h;\n    const r = \"tool\", { tool_choice: i = \"auto\", stream: a, ...o } = t, c = typeof i != \"string\" && ((u = i == null ? void 0 : i.function) == null ? void 0 : u.name), { maxChatCompletions: p = _t } = s || {}, f = {};\n    for (const d of t.tools)\n      d.type === \"function\" && (f[d.function.name || d.function.function.name] = d.function);\n    const w = \"tools\" in t ? t.tools.map((d) => d.type === \"function\" ? {\n      type: \"function\",\n      function: {\n        name: d.function.name || d.function.function.name,\n        parameters: d.function.parameters,\n        description: d.function.description\n      }\n    } : d) : void 0;\n    for (const d of t.messages)\n      this._addMessage(d, !1);\n    for (let d = 0; d < p; ++d) {\n      const y = (h = (await this._createChatCompletion(e, {\n        ...o,\n        tool_choice: i,\n        tools: w,\n        messages: [...this.messages]\n      }, s)).choices[0]) == null ? void 0 : h.message;\n      if (!y)\n        throw new m(\"missing message in ChatCompletion response\");\n      if (!y.tool_calls)\n        return;\n      for (const A of y.tool_calls) {\n        if (A.type !== \"function\")\n          continue;\n        const C = A.id, { name: T, arguments: R } = A.function, S = f[T];\n        if (S) {\n          if (c && c !== T) {\n            const B = `Invalid tool_call: ${JSON.stringify(T)}. ${JSON.stringify(c)} requested. Please try again`;\n            this._addMessage({ role: r, tool_call_id: C, content: B });\n            continue;\n          }\n        } else {\n          const B = `Invalid tool_call: ${JSON.stringify(T)}. Available options are: ${w.map((Le) => JSON.stringify(Le.function.name)).join(\", \")}. Please try again`;\n          this._addMessage({ role: r, tool_call_id: C, content: B });\n          continue;\n        }\n        let v;\n        try {\n          v = bt(S) ? await S.parse(R) : R;\n        } catch (B) {\n          const Le = B instanceof Error ? B.message : String(B);\n          this._addMessage({ role: r, tool_call_id: C, content: Le });\n          continue;\n        }\n        const Oe = await S.function(v, this), Gt = l(this, x, \"m\", Ye).call(this, Oe);\n        if (this._addMessage({ role: r, tool_call_id: C, content: Gt }), c)\n          return;\n      }\n    }\n  }\n}\nne = /* @__PURE__ */ new WeakMap(), se = /* @__PURE__ */ new WeakMap(), q = /* @__PURE__ */ new WeakMap(), W = /* @__PURE__ */ new WeakMap(), re = /* @__PURE__ */ new WeakMap(), X = /* @__PURE__ */ new WeakMap(), M = /* @__PURE__ */ new WeakMap(), V = /* @__PURE__ */ new WeakMap(), ie = /* @__PURE__ */ new WeakMap(), ae = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakMap(), Qe = /* @__PURE__ */ new WeakMap(), x = /* @__PURE__ */ new WeakSet(), Ve = function() {\n  return l(this, x, \"m\", Je).call(this).content;\n}, Je = function() {\n  let e = this.messages.length;\n  for (; e-- > 0; ) {\n    const t = this.messages[e];\n    if (z(t))\n      return t;\n  }\n  throw new m(\"stream ended without producing a ChatCompletionMessage with role=assistant\");\n}, Ke = function() {\n  for (let e = this.messages.length - 1; e >= 0; e--) {\n    const t = this.messages[e];\n    if (z(t) && (t != null && t.function_call))\n      return t.function_call;\n  }\n}, Ge = function() {\n  for (let e = this.messages.length - 1; e >= 0; e--) {\n    const t = this.messages[e];\n    if (Wt(t) && t.content != null)\n      return t.content;\n  }\n}, ze = function() {\n  const e = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n  for (const { usage: t } of this._chatCompletions)\n    t && (e.completion_tokens += t.completion_tokens, e.prompt_tokens += t.prompt_tokens, e.total_tokens += t.total_tokens);\n  return e;\n}, Xt = function(e) {\n  if (e.n != null && e.n > 1)\n    throw new m(\"ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.\");\n}, Ye = function(e) {\n  return typeof e == \"string\" ? e : e === void 0 ? \"undefined\" : JSON.stringify(e);\n};\nclass Q extends Vt {\n  static runFunctions(e, t, s) {\n    const r = new Q();\n    return r._run(() => r._runFunctions(e, t, s)), r;\n  }\n  static runTools(e, t, s) {\n    const r = new Q();\n    return r._run(() => r._runTools(e, t, s)), r;\n  }\n  _addMessage(e) {\n    super._addMessage(e), z(e) && e.content && this._emit(\"content\", e.content);\n  }\n}\nvar $ = globalThis && globalThis.__classPrivateFieldGet || function(n, e, t, s) {\n  if (t === \"a\" && !s)\n    throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof e == \"function\" ? n !== e || !s : !e.has(n))\n    throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return t === \"m\" ? s : t === \"a\" ? s.call(n) : s ? s.value : e.get(n);\n}, De = globalThis && globalThis.__classPrivateFieldSet || function(n, e, t, s, r) {\n  if (s === \"m\")\n    throw new TypeError(\"Private method is not writable\");\n  if (s === \"a\" && !r)\n    throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof e == \"function\" ? n !== e || !r : !e.has(n))\n    throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return s === \"a\" ? r.call(n, t) : r ? r.value = t : e.set(n, t), t;\n}, F, O, Ue, He, ee, Ct;\nclass Y extends Vt {\n  constructor() {\n    super(...arguments), F.add(this), O.set(this, void 0);\n  }\n  get currentChatCompletionSnapshot() {\n    return $(this, O, \"f\");\n  }\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(e) {\n    const t = new Y();\n    return t._run(() => t._fromReadableStream(e)), t;\n  }\n  static createChatCompletion(e, t, s) {\n    const r = new Y();\n    return r._run(() => r._runChatCompletion(e, { ...t, stream: !0 }, s)), r;\n  }\n  async _createChatCompletion(e, t, s) {\n    var a;\n    const r = s == null ? void 0 : s.signal;\n    r && (r.aborted && this.controller.abort(), r.addEventListener(\"abort\", () => this.controller.abort())), $(this, F, \"m\", Ue).call(this);\n    const i = await e.create({ ...t, stream: !0 }, { ...s, signal: this.controller.signal });\n    this._connected();\n    for await (const o of i)\n      $(this, F, \"m\", He).call(this, o);\n    if ((a = i.controller.signal) != null && a.aborted)\n      throw new j();\n    return this._addChatCompletion($(this, F, \"m\", ee).call(this));\n  }\n  async _fromReadableStream(e, t) {\n    var a;\n    const s = t == null ? void 0 : t.signal;\n    s && (s.aborted && this.controller.abort(), s.addEventListener(\"abort\", () => this.controller.abort())), $(this, F, \"m\", Ue).call(this), this._connected();\n    const r = L.fromReadableStream(e, this.controller);\n    let i;\n    for await (const o of r)\n      i && i !== o.id && this._addChatCompletion($(this, F, \"m\", ee).call(this)), $(this, F, \"m\", He).call(this, o), i = o.id;\n    if ((a = r.controller.signal) != null && a.aborted)\n      throw new j();\n    return this._addChatCompletion($(this, F, \"m\", ee).call(this));\n  }\n  [(O = /* @__PURE__ */ new WeakMap(), F = /* @__PURE__ */ new WeakSet(), Ue = function() {\n    this.ended || De(this, O, void 0, \"f\");\n  }, He = function(t) {\n    var a, o, c;\n    if (this.ended)\n      return;\n    const s = $(this, F, \"m\", Ct).call(this, t);\n    this._emit(\"chunk\", t, s);\n    const r = (o = (a = t.choices[0]) == null ? void 0 : a.delta) == null ? void 0 : o.content, i = (c = s.choices[0]) == null ? void 0 : c.message;\n    r != null && (i == null ? void 0 : i.role) === \"assistant\" && (i != null && i.content) && this._emit(\"content\", r, i.content);\n  }, ee = function() {\n    if (this.ended)\n      throw new m(\"stream has ended, this shouldn't happen\");\n    const t = $(this, O, \"f\");\n    if (!t)\n      throw new m(\"request ended without sending any chunks\");\n    return De(this, O, void 0, \"f\"), En(t);\n  }, Ct = function(t) {\n    var s, r;\n    let i = $(this, O, \"f\");\n    const { choices: a, ...o } = t;\n    i ? Object.assign(i, o) : i = De(this, O, {\n      ...o,\n      choices: []\n    }, \"f\");\n    for (const { delta: c, finish_reason: p, index: f, ...w } of t.choices) {\n      let u = i.choices[f];\n      if (!u) {\n        i.choices[f] = { finish_reason: p, index: f, message: c, ...w };\n        continue;\n      }\n      if (p && (u.finish_reason = p), Object.assign(u, w), !c)\n        continue;\n      const { content: h, function_call: d, role: P, tool_calls: y } = c;\n      if (h && (u.message.content = (u.message.content || \"\") + h), P && (u.message.role = P), d && (u.message.function_call ? (d.name && (u.message.function_call.name = d.name), d.arguments && ((s = u.message.function_call).arguments ?? (s.arguments = \"\"), u.message.function_call.arguments += d.arguments)) : u.message.function_call = d), y) {\n        u.message.tool_calls || (u.message.tool_calls = []);\n        for (const { index: A, id: C, type: T, function: R } of y) {\n          const S = (r = u.message.tool_calls)[A] ?? (r[A] = {});\n          C && (S.id = C), T && (S.type = T), R && (S.function ?? (S.function = { arguments: \"\" })), R != null && R.name && (S.function.name = R.name), R != null && R.arguments && (S.function.arguments += R.arguments);\n        }\n      }\n    }\n    return i;\n  }, Symbol.asyncIterator)]() {\n    const e = [], t = [];\n    let s = !1;\n    return this.on(\"chunk\", (r) => {\n      const i = t.shift();\n      i ? i(r) : e.push(r);\n    }), this.on(\"end\", () => {\n      s = !0;\n      for (const r of t)\n        r(void 0);\n      t.length = 0;\n    }), {\n      next: async () => e.length ? { value: e.shift(), done: !1 } : s ? { value: void 0, done: !0 } : new Promise((i) => t.push(i)).then((i) => i ? { value: i, done: !1 } : { value: void 0, done: !0 })\n    };\n  }\n  toReadableStream() {\n    return new L(this[Symbol.asyncIterator].bind(this), this.controller).toReadableStream();\n  }\n}\nfunction En(n) {\n  const { id: e, choices: t, created: s, model: r } = n;\n  return {\n    id: e,\n    choices: t.map(({ message: i, finish_reason: a, index: o }) => {\n      if (!a)\n        throw new m(`missing finish_reason for choice ${o}`);\n      const { content: c = null, function_call: p, tool_calls: f } = i, w = i.role;\n      if (!w)\n        throw new m(`missing role for choice ${o}`);\n      if (p) {\n        const { arguments: u, name: h } = p;\n        if (u == null)\n          throw new m(`missing function_call.arguments for choice ${o}`);\n        if (!h)\n          throw new m(`missing function_call.name for choice ${o}`);\n        return { message: { content: c, function_call: { arguments: u, name: h }, role: w }, finish_reason: a, index: o };\n      }\n      return f ? {\n        index: o,\n        finish_reason: a,\n        message: {\n          role: w,\n          content: c,\n          tool_calls: f.map((u, h) => {\n            const { function: d, type: P, id: y } = u, { arguments: A, name: C } = d || {};\n            if (y == null)\n              throw new m(`missing choices[${o}].tool_calls[${h}].id\n${te(n)}`);\n            if (P == null)\n              throw new m(`missing choices[${o}].tool_calls[${h}].type\n${te(n)}`);\n            if (C == null)\n              throw new m(`missing choices[${o}].tool_calls[${h}].function.name\n${te(n)}`);\n            if (A == null)\n              throw new m(`missing choices[${o}].tool_calls[${h}].function.arguments\n${te(n)}`);\n            return { id: y, type: P, function: { name: C, arguments: A } };\n          })\n        }\n      } : { message: { content: c, role: w }, finish_reason: a, index: o };\n    }),\n    created: s,\n    model: r,\n    object: \"chat.completion\"\n  };\n}\nfunction te(n) {\n  return JSON.stringify(n);\n}\nclass H extends Y {\n  static fromReadableStream(e) {\n    const t = new H();\n    return t._run(() => t._fromReadableStream(e)), t;\n  }\n  static runFunctions(e, t, s) {\n    const r = new H();\n    return r._run(() => r._runFunctions(e, t, s)), r;\n  }\n  static runTools(e, t, s) {\n    const r = new H();\n    return r._run(() => r._runTools(e, t, s)), r;\n  }\n}\nlet Jt = class extends g {\n  runFunctions(e, t) {\n    return e.stream ? H.runFunctions(this.client.chat.completions, e, t) : Q.runFunctions(this.client.chat.completions, e, t);\n  }\n  runTools(e, t) {\n    return e.stream ? H.runTools(this.client.chat.completions, e, t) : Q.runTools(this.client.chat.completions, e, t);\n  }\n  /**\n   * Creates a chat completion stream\n   */\n  stream(e, t) {\n    return Y.createChatCompletion(this.client.chat.completions, e, t);\n  }\n};\nclass pe extends g {\n  constructor() {\n    super(...arguments), this.completions = new Jt(this.client);\n  }\n}\n(function(n) {\n  n.Completions = Jt;\n})(pe || (pe = {}));\nlet ge = class extends g {\n  /**\n   * Retrieves a message file.\n   */\n  retrieve(e, t, s, r) {\n    return this.get(`/threads/${e}/messages/${t}/files/${s}`, {\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n  list(e, t, s = {}, r) {\n    return I(s) ? this.list(e, t, {}, s) : this.getAPIList(`/threads/${e}/messages/${t}/files`, nt, {\n      query: s,\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n};\nclass nt extends k {\n}\n(function(n) {\n  n.MessageFilesPage = nt;\n})(ge || (ge = {}));\nclass we extends g {\n  constructor() {\n    super(...arguments), this.files = new ge(this.client);\n  }\n  /**\n   * Create a message.\n   */\n  create(e, t, s) {\n    return this.post(`/threads/${e}/messages`, {\n      body: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Retrieve a message.\n   */\n  retrieve(e, t, s) {\n    return this.get(`/threads/${e}/messages/${t}`, {\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Modifies a message.\n   */\n  update(e, t, s, r) {\n    return this.post(`/threads/${e}/messages/${t}`, {\n      body: s,\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n  list(e, t = {}, s) {\n    return I(t) ? this.list(e, {}, t) : this.getAPIList(`/threads/${e}/messages`, st, {\n      query: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n}\nclass st extends k {\n}\n(function(n) {\n  n.ThreadMessagesPage = st, n.Files = ge, n.MessageFilesPage = nt;\n})(we || (we = {}));\nclass ye extends g {\n  /**\n   * Retrieves a run step.\n   */\n  retrieve(e, t, s, r) {\n    return this.get(`/threads/${e}/runs/${t}/steps/${s}`, {\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n  list(e, t, s = {}, r) {\n    return I(s) ? this.list(e, t, {}, s) : this.getAPIList(`/threads/${e}/runs/${t}/steps`, rt, {\n      query: s,\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n}\nclass rt extends k {\n}\n(function(n) {\n  n.RunStepsPage = rt;\n})(ye || (ye = {}));\nclass be extends g {\n  constructor() {\n    super(...arguments), this.steps = new ye(this.client);\n  }\n  /**\n   * Create a run.\n   */\n  create(e, t, s) {\n    return this.post(`/threads/${e}/runs`, {\n      body: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Retrieves a run.\n   */\n  retrieve(e, t, s) {\n    return this.get(`/threads/${e}/runs/${t}`, {\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Modifies a run.\n   */\n  update(e, t, s, r) {\n    return this.post(`/threads/${e}/runs/${t}`, {\n      body: s,\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n  list(e, t = {}, s) {\n    return I(t) ? this.list(e, {}, t) : this.getAPIList(`/threads/${e}/runs`, it, {\n      query: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Cancels a run that is `in_progress`.\n   */\n  cancel(e, t, s) {\n    return this.post(`/threads/${e}/runs/${t}/cancel`, {\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * When a run has the `status: \"requires_action\"` and `required_action.type` is\n   * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n   * tool calls once they're all completed. All outputs must be submitted in a single\n   * request.\n   */\n  submitToolOutputs(e, t, s, r) {\n    return this.post(`/threads/${e}/runs/${t}/submit_tool_outputs`, {\n      body: s,\n      ...r,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...r == null ? void 0 : r.headers }\n    });\n  }\n}\nclass it extends k {\n}\n(function(n) {\n  n.RunsPage = it, n.Steps = ye, n.RunStepsPage = rt;\n})(be || (be = {}));\nclass _e extends g {\n  constructor() {\n    super(...arguments), this.runs = new be(this.client), this.messages = new we(this.client);\n  }\n  create(e = {}, t) {\n    return I(e) ? this.create({}, e) : this.post(\"/threads\", {\n      body: e,\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(e, t) {\n    return this.get(`/threads/${e}`, {\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Modifies a thread.\n   */\n  update(e, t, s) {\n    return this.post(`/threads/${e}`, {\n      body: t,\n      ...s,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...s == null ? void 0 : s.headers }\n    });\n  }\n  /**\n   * Delete a thread.\n   */\n  del(e, t) {\n    return this.delete(`/threads/${e}`, {\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Create a thread and run it in one request.\n   */\n  createAndRun(e, t) {\n    return this.post(\"/threads/runs\", {\n      body: e,\n      ...t,\n      headers: { \"OpenAI-Beta\": \"assistants=v1\", ...t == null ? void 0 : t.headers }\n    });\n  }\n}\n(function(n) {\n  n.Runs = be, n.RunsPage = it, n.Messages = we, n.ThreadMessagesPage = st;\n})(_e || (_e = {}));\nclass Ce extends g {\n  constructor() {\n    super(...arguments), this.chat = new pe(this.client), this.assistants = new me(this.client), this.threads = new _e(this.client);\n  }\n}\n(function(n) {\n  n.Chat = pe, n.Assistants = me, n.AssistantsPage = tt, n.Threads = _e;\n})(Ce || (Ce = {}));\nclass xe extends g {\n  create(e, t) {\n    return this.post(\"/completions\", { body: e, ...t, stream: e.stream ?? !1 });\n  }\n}\nxe || (xe = {});\nclass Pe extends g {\n  /**\n   * Creates an embedding vector representing the input text.\n   */\n  create(e, t) {\n    return this.post(\"/embeddings\", { body: e, ...t });\n  }\n}\nPe || (Pe = {});\nclass Re extends g {\n  /**\n   * Creates a new edit for the provided input, instruction, and parameters.\n   *\n   * @deprecated The Edits API is deprecated; please use Chat Completions instead.\n   *\n   * https://openai.com/blog/gpt-4-api-general-availability#deprecation-of-the-edits-api\n   */\n  create(e, t) {\n    return this.post(\"/edits\", { body: e, ...t });\n  }\n}\nRe || (Re = {});\nclass Se extends g {\n  /**\n   * Upload a file that can be used across various endpoints/features. The size of\n   * all the files uploaded by one organization can be up to 100 GB.\n   *\n   * The size of individual files for can be a maximum of 512MB. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) to\n   * learn more about the types of files supported. The Fine-tuning API only supports\n   * `.jsonl` files.\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(e, t) {\n    return this.post(\"/files\", G({ body: e, ...t }));\n  }\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(e, t) {\n    return this.get(`/files/${e}`, t);\n  }\n  list(e = {}, t) {\n    return I(e) ? this.list({}, e) : this.getAPIList(\"/files\", at, { query: e, ...t });\n  }\n  /**\n   * Delete a file.\n   */\n  del(e, t) {\n    return this.delete(`/files/${e}`, t);\n  }\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(e, t) {\n    return this.get(`/files/${e}/content`, { ...t, __binaryResponse: !0 });\n  }\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(e, t) {\n    return this.get(`/files/${e}/content`, {\n      ...t,\n      headers: { Accept: \"application/json\", ...t == null ? void 0 : t.headers }\n    });\n  }\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(e, { pollInterval: t = 5e3, maxWait: s = 30 * 60 * 1e3 } = {}) {\n    const r = /* @__PURE__ */ new Set([\"processed\", \"error\", \"deleted\"]), i = Date.now();\n    let a = await this.retrieve(e);\n    for (; !a.status || !r.has(a.status); )\n      if (await Ht(t), a = await this.retrieve(e), Date.now() - i > s)\n        throw new Ze({\n          message: `Giving up on waiting for file ${e} to finish processing after ${s} milliseconds.`\n        });\n    return a;\n  }\n}\nclass at extends ke {\n}\n(function(n) {\n  n.FileObjectsPage = at;\n})(Se || (Se = {}));\nclass Ae extends g {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  create(e, t) {\n    return this.post(\"/fine-tunes\", { body: e, ...t });\n  }\n  /**\n   * Gets info about the fine-tune job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  retrieve(e, t) {\n    return this.get(`/fine-tunes/${e}`, t);\n  }\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(e) {\n    return this.getAPIList(\"/fine-tunes\", ot, e);\n  }\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(e, t) {\n    return this.post(`/fine-tunes/${e}/cancel`, t);\n  }\n  listEvents(e, t, s) {\n    return this.get(`/fine-tunes/${e}/events`, {\n      query: t,\n      timeout: 864e5,\n      ...s,\n      stream: (t == null ? void 0 : t.stream) ?? !1\n    });\n  }\n}\nclass ot extends ke {\n}\n(function(n) {\n  n.FineTunesPage = ot;\n})(Ae || (Ae = {}));\nclass Ee extends g {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  create(e, t) {\n    return this.post(\"/fine_tuning/jobs\", { body: e, ...t });\n  }\n  /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  retrieve(e, t) {\n    return this.get(`/fine_tuning/jobs/${e}`, t);\n  }\n  list(e = {}, t) {\n    return I(e) ? this.list({}, e) : this.getAPIList(\"/fine_tuning/jobs\", ct, { query: e, ...t });\n  }\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(e, t) {\n    return this.post(`/fine_tuning/jobs/${e}/cancel`, t);\n  }\n  listEvents(e, t = {}, s) {\n    return I(t) ? this.listEvents(e, {}, t) : this.getAPIList(`/fine_tuning/jobs/${e}/events`, lt, {\n      query: t,\n      ...s\n    });\n  }\n}\nclass ct extends k {\n}\nclass lt extends k {\n}\n(function(n) {\n  n.FineTuningJobsPage = ct, n.FineTuningJobEventsPage = lt;\n})(Ee || (Ee = {}));\nclass $e extends g {\n  constructor() {\n    super(...arguments), this.jobs = new Ee(this.client);\n  }\n}\n(function(n) {\n  n.Jobs = Ee, n.FineTuningJobsPage = ct, n.FineTuningJobEventsPage = lt;\n})($e || ($e = {}));\nclass Te extends g {\n  /**\n   * Creates a variation of a given image.\n   */\n  createVariation(e, t) {\n    return this.post(\"/images/variations\", G({ body: e, ...t }));\n  }\n  /**\n   * Creates an edited or extended image given an original image and a prompt.\n   */\n  edit(e, t) {\n    return this.post(\"/images/edits\", G({ body: e, ...t }));\n  }\n  /**\n   * Creates an image given a prompt.\n   */\n  generate(e, t) {\n    return this.post(\"/images/generations\", { body: e, ...t });\n  }\n}\nTe || (Te = {});\nclass ve extends g {\n  /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */\n  retrieve(e, t) {\n    return this.get(`/models/${e}`, t);\n  }\n  /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */\n  list(e) {\n    return this.getAPIList(\"/models\", ut, e);\n  }\n  /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization to\n   * delete a model.\n   */\n  del(e, t) {\n    return this.delete(`/models/${e}`, t);\n  }\n}\nclass ut extends ke {\n}\n(function(n) {\n  n.ModelsPage = ut;\n})(ve || (ve = {}));\nclass Fe extends g {\n  /**\n   * Classifies if text violates OpenAI's Content Policy\n   */\n  create(e, t) {\n    return this.post(\"/moderations\", { body: e, ...t });\n  }\n}\nFe || (Fe = {});\nvar Kt;\nclass b extends fn {\n  /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string} [opts.apiKey==process.env['OPENAI_API_KEY'] ?? undefined]\n   * @param {string | null} [opts.organization==process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string} [opts.baseURL] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({ apiKey: e = yt(\"OPENAI_API_KEY\"), organization: t = yt(\"OPENAI_ORG_ID\") ?? null, ...s } = {}) {\n    if (e === void 0)\n      throw new m(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n    const r = {\n      apiKey: e,\n      organization: t,\n      ...s,\n      baseURL: s.baseURL ?? \"https://api.openai.com/v1\"\n    };\n    if (!r.dangerouslyAllowBrowser && Sn())\n      throw new m(`It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the \\`dangerouslyAllowBrowser\\` option to \\`true\\`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n`);\n    super({\n      baseURL: r.baseURL,\n      timeout: r.timeout ?? 6e5,\n      httpAgent: r.httpAgent,\n      maxRetries: r.maxRetries,\n      fetch: r.fetch\n    }), this.completions = new xe(this), this.chat = new ce(this), this.edits = new Re(this), this.embeddings = new Pe(this), this.files = new Se(this), this.images = new Te(this), this.audio = new de(this), this.moderations = new Fe(this), this.models = new ve(this), this.fineTuning = new $e(this), this.fineTunes = new Ae(this), this.beta = new Ce(this), this._options = r, this.apiKey = e, this.organization = t;\n  }\n  defaultQuery() {\n    return this._options.defaultQuery;\n  }\n  defaultHeaders(e) {\n    return {\n      ...super.defaultHeaders(e),\n      \"OpenAI-Organization\": this.organization,\n      ...this._options.defaultHeaders\n    };\n  }\n  authHeaders(e) {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n}\nKt = b;\nb.OpenAI = Kt;\nb.OpenAIError = m;\nb.APIError = _;\nb.APIConnectionError = Ie;\nb.APIConnectionTimeoutError = Ze;\nb.APIUserAbortError = j;\nb.NotFoundError = It;\nb.ConflictError = Mt;\nb.RateLimitError = Ot;\nb.BadRequestError = Tt;\nb.AuthenticationError = vt;\nb.InternalServerError = Lt;\nb.PermissionDeniedError = Ft;\nb.UnprocessableEntityError = kt;\n(function(n) {\n  n.toFile = Nt, n.fileFromPath = Et, n.Page = ke, n.CursorPage = k, n.Completions = xe, n.Chat = ce, n.Edits = Re, n.Embeddings = Pe, n.Files = Se, n.FileObjectsPage = at, n.Images = Te, n.Audio = de, n.Moderations = Fe, n.Models = ve, n.ModelsPage = ut, n.FineTuning = $e, n.FineTunes = Ae, n.FineTunesPage = ot, n.Beta = Ce;\n})(b || (b = {}));\nconst $n = b;\n(function() {\n  try {\n    if (typeof document < \"u\") {\n      var n = document.createElement(\"style\");\n      n.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-paragraph[data-placeholder]:empty:before{content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before{opacity:1}.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before,.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus:before{opacity:0}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")), document.head.appendChild(n);\n    }\n  } catch (e) {\n    console.error(\"vite-plugin-css-injected-by-js\", e);\n  }\n})();\nconst Tn = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents a regular text block\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass ht {\n  /**\n   * Default placeholder for Paragraph Tool\n   *\n   * @returns {string}\n   * @class\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"\";\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {ParagraphData} params.data - previously saved data\n   * @param {ParagraphConfig} params.config - user config for Tool\n   * @param {object} params.api - editor.js api\n   * @param {boolean} readOnly - read only mode flag\n   */\n  constructor({ data: e, config: t, api: s, readOnly: r }) {\n    this.api = s, this.readOnly = r, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-paragraph\"\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = t.placeholder ? t.placeholder : ht.DEFAULT_PLACEHOLDER, this._data = {}, this._element = null, this._preserveBlank = t.preserveBlank !== void 0 ? t.preserveBlank : !1, this.data = e;\n  }\n  /**\n   * Check if text content is empty and set empty string to inner html.\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n   *\n   * @param {KeyboardEvent} e - key up event\n   */\n  onKeyUp(e) {\n    if (e.code !== \"Backspace\" && e.code !== \"Delete\")\n      return;\n    const { textContent: t } = this._element;\n    t === \"\" && (this._element.innerHTML = \"\");\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLElement}\n   * @private\n   */\n  drawView() {\n    const e = document.createElement(\"DIV\");\n    return e.classList.add(this._CSS.wrapper, this._CSS.block), e.contentEditable = !1, e.dataset.placeholder = this.api.i18n.t(this._placeholder), this._data.text && (e.innerHTML = this._data.text), this.readOnly || (e.contentEditable = !0, e.addEventListener(\"keyup\", this.onKeyUp)), e;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this._element = this.drawView(), this._element;\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {ParagraphData} data\n   * @public\n   */\n  merge(e) {\n    const t = {\n      text: this.data.text + e.text\n    };\n    this.data = t;\n  }\n  /**\n   * Validate Paragraph block data:\n   * - check for emptiness\n   *\n   * @param {ParagraphData} savedData â€” data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return !(e.text.trim() === \"\" && !this._preserveBlank);\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {ParagraphData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML\n    };\n  }\n  /**\n   * On paste callback fired from Editor.\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = {\n      text: e.detail.data.innerHTML\n    };\n    this.data = t;\n  }\n  /**\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // to convert Paragraph to other block, use 'text' property of saved data\n      import: \"text\"\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n    };\n  }\n  /**\n   * Sanitizer rules\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Returns true to notify the core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get current Tools`s data\n   *\n   * @returns {ParagraphData} Current data\n   * @private\n   */\n  get data() {\n    if (this._element !== null) {\n      const e = this._element.innerHTML;\n      this._data.text = e;\n    }\n    return this._data;\n  }\n  /**\n   * Store data in plugin:\n   * - at the this._data property\n   * - at the HTML\n   *\n   * @param {ParagraphData} data â€” data to set\n   * @private\n   */\n  set data(e) {\n    this._data = e || {}, this._element !== null && this.hydrate();\n  }\n  /**\n   * Fill tool's view with data\n   */\n  hydrate() {\n    window.requestAnimationFrame(() => {\n      this._element.innerHTML = this._data.text || \"\";\n    });\n  }\n  /**\n   * Used by Editor paste handling API.\n   * Provides configuration to handle P tags.\n   *\n   * @returns {{tags: string[]}}\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"P\"]\n    };\n  }\n  /**\n   * Icon and title for displaying at the Toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: Tn,\n      title: \"Text\"\n    };\n  }\n}\nfunction vn(n, e = 2e3) {\n  let t;\n  return (...s) => {\n    clearTimeout(t), t = setTimeout(() => {\n      n.apply(this, s);\n    }, e);\n  };\n}\nclass Un extends ht {\n  constructor({ api: t, block: s, config: r, data: i }) {\n    console.log(r);\n    super({\n      api: t,\n      block: s,\n      config: r,\n      data: i\n    });\n    Be(this, \"openai\");\n    Be(this, \"onInput\", vn((t) => {\n      this._element.querySelector(\"#ai-suggestions\") || t.inputType === \"deleteContentBackward\" || t.inputType === \"deleteContentForward\" || t.inputType === \"insertParagraph\" || t.inputType === \"insertFromPaste\" || t.inputType === \"insertFromDrop\" || !t.target.innerHTML || this.getAICompletion(t.target.innerHTML);\n    }));\n    if (!r.openaiKey)\n      throw new Error(\"OpenAI key is required for AI Text\");\n    this.openai = new $n({\n      apiKey: r.openaiKey,\n      dangerouslyAllowBrowser: !0\n    });\n  }\n  static get toolbox() {\n    return {\n      title: \"AI TEXT (experimental)\",\n      icon: `<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M8 4V20M17 12V20M6 20H10M15 20H19M13 7V4H3V7M21 14V12H13V14\" stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>`\n    };\n  }\n  getAICompletion(t) {\n    if (!t)\n      return;\n    const s = document.createElement(\"div\");\n    s.innerHTML = `<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M12 2.99988V5.99988M12 20.9999V17.9999M4.20577 16.4999L6.80385 14.9999M21 11.9999H18M16.5 19.7941L15 17.196M3 11.9999H6M7.5 4.20565L9 6.80373M7.5 19.7941L9 17.196M19.7942 16.4999L17.1962 14.9999M4.20577 7.49988L6.80385 8.99988\" stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>`, s.id = \"ai-suggestions-loader\", s.style.display = \"inline-flex\", s.style.alignItems = \"center\", s.style.width = \"24px\", s.style.height = \"24px\", s.style.paddingLeft = \"4px\", s.style.color = \"lightgray\", s.style.position = \"absolute\", s.animate(\n      [\n        {\n          transform: \"rotate(0deg)\"\n        },\n        {\n          transform: \"rotate(360deg)\"\n        }\n      ],\n      {\n        duration: 2e3,\n        iterations: 1 / 0\n      }\n    ), this._element.appendChild(s), this.openai.chat.completions.create({\n      messages: [\n        {\n          role: \"user\",\n          content: `Behave yourself as a professional journalist and finish this text in similar style: ${t.length > 100 ? t : t.slice(t.length - 100)}`\n        }\n      ],\n      max_tokens: 256,\n      model: \"gpt-3.5-turbo\"\n    }).then((r) => {\n      var a;\n      const i = document.createElement(\"span\");\n      i.innerHTML = \"\", i.id = \"ai-suggestions\", i.style.color = \"lightgray\", i.innerHTML = r.choices[0].message.content, this._element.appendChild(i), (a = this._element.querySelector(\"#ai-suggestions-loader\")) == null || a.remove();\n    });\n  }\n  onKeyUp(t) {\n    var r;\n    if (t.code === \"Escape\" || t.code === \"Backspace\") {\n      (r = this._element.querySelector(\"#ai-suggestions\")) == null || r.remove();\n      return;\n    }\n    if (t.code === \"AltLeft\" || t.code === \"AltRight\") {\n      const i = this._element.querySelector(\"#ai-suggestions\"), a = i == null ? void 0 : i.textContent;\n      if (!a)\n        return;\n      const o = document.createTextNode(\n        a\n      );\n      this._element.appendChild(o), i.remove();\n      return;\n    }\n    if (t.code !== \"Backspace\" && t.code !== \"Delete\")\n      return;\n    const { textContent: s } = this._element;\n    s === \"\" && (this._element.innerHTML = \"\");\n  }\n  drawView() {\n    const t = document.createElement(\"DIV\");\n    return t.classList.add(this._CSS.wrapper, this._CSS.block), t.contentEditable = !1, t.dataset.placeholder = this.api.i18n.t(this._placeholder), this._data.text && (t.innerHTML = this._data.text), this.readOnly || (t.contentEditable = !0, t.addEventListener(\"keyup\", this.onKeyUp), t.addEventListener(\"input\", this.onInput)), t;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alkhipce/editorjs-aitext/dist/aitext.mjs\n");

/***/ })

};
;